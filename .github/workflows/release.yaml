name: Close release
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Next version type"
        required: true
        type: choice
        default: "patch"
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  create-release:
    runs-on: ubuntu-24.04
    outputs:
      release_id: ${{ steps.create-release-script.outputs.result }}
      release_version: ${{ steps.release-version.outputs.release_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v6
        with:
          node-version: 24

      - name: Get release version from src-tauri/Cargo.toml
        id: release-version
        shell: bash
        run: |
          set -euo pipefail

          release_version=$(grep -m1 '^version\s*=' src-tauri/Cargo.toml | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          if [[ -z "$release_version" ]]; then
            echo "Could not find version in src-tauri/Cargo.toml" >&2
            exit 1
          fi
          echo "Release version: $release_version"
          echo "release_version=${release_version}" >> "$GITHUB_OUTPUT"

      - name: Create release via GitHub script
        id: create-release-script
        uses: actions/github-script@v8
        env:
          RELEASE_VERSION: ${{ steps.release-version.outputs.release_version }}
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.RELEASE_VERSION}`,
              draft: true,
              prerelease: false,
              generate_release_notes: true
            })
            return data.id

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: "macos-15"
            target: "aarch64-apple-darwin"
            args: "--target aarch64-apple-darwin"
          - runner: "macos-15"
            target: "x86_64-apple-darwin"
            args: "--target x86_64-apple-darwin"
          - runner: "macos-15"
            target: "x86_64-apple-darwin"
            args: "--target universal-apple-darwin"

    runs-on: ${{ matrix.runner }}
    # env:
      # APPLE_ID: some-apple-id
      # APPLE_ID_PASSWORD: some-apple-password
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain (stable) + targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ./src-tauri -> target

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install frontend dependencies
        run: deno install

      - name: Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "FOO0: $(echo $APPLE_CERTIFICATE | head -n 10)"
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          echo "FOO1"; cat certificate.p12 | head -c 20
          keychain_pass=$(openssl rand -base64 24)
          echo "FOO2: $keychain_pass"
          security create-keychain -p "$keychain_pass" build.keychain
          echo "FOO3"; cat build.keychain | head -c 20
          security default-keychain -s build.keychain
          echo "FOO4"
          security unlock-keychain -p "$keychain_pass" build.keychain
          echo "FOO5"
          security set-keychain-settings -t 3600 -u build.keychain
          echo "FOO6"
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          echo "FOO7"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$keychain_pass" build.keychain
          echo "FOO8"
          security find-identity -v -p codesigning build.keychain
          echo "FOO9"

      - name: Verify Certificate
        id: verify-certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Apple Development")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "cert_id=${CERT_ID}" >> $GITHUB_OUTPUT
          echo "Certificate imported."

      - name: Build tauri release
        uses: tauri-apps/tauri-action@action-v0.5.23
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ steps.verify-certificate.outputs.cert_id }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tauriScript: "deno task tauri"
          args: ${{ matrix.args }}

  bump-version:
    needs: [create-release, build-tauri]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Bump Version
        id: bump
        shell: bash
        run: |
          set -euo pipefail

          release_type="${{ github.event.inputs.release_type }}"

          current_version=${{ needs.create-release.outputs.release_version }}

          # split into parts via bash parameter expansion
          major=${current_version%%.*}
          rest=${current_version#*.}
          minor=${rest%%.*}
          patch=${rest#*.}

          echo "Current version: $current_version (major=$major minor=$minor patch=$patch)"
          case "$release_type" in
            major)
              major=$((major+1)); minor=0; patch=0
              ;;
            minor)
              minor=$((minor+1)); patch=0
              ;;
            patch)
              patch=$((patch+1))
              ;;
            *)
              echo "Invalid release type: $release_type" >&2
              exit 1
              ;;
          esac

          new_version="${major}.${minor}.${patch}"

          # Update version in src-tauri/Cargo.toml (only inside [package] section)
          perl -0777 -pe \
            "s/(\[package\].*?version\\s*=\\s*\")\\d+\\.\\d+\\.\\d+(\"\\b)/\$1${new_version}\$2/s" \
            -i src-tauri/Cargo.toml

          # Update version in package.json (top-level "version" field)
          perl -0777 -pe \
            "s/(\"version\"\\s*:\\s*\")\\d+\\.\\d+\\.\\d+(\"\\b)/\$1${new_version}\$2/s" \
            -i package.json

          echo "New version: $new_version"
          echo "bump_version=${new_version}" >> "$GITHUB_OUTPUT"

      - name: Commit bumped versions
        uses: EndBug/add-and-commit@v9
        with:
          add: '["src-tauri/Cargo.*", "package.json" ]'
          new_branch: main
          message: "Bump to version ${{ steps.bump.outputs.bump_version }}"
          pathspec_error_handling: exitImmediately
